{"version":3,"sources":["../../src/components/button/styledComponents.ts","../../src/components/button/index.tsx","../../src/components/grid/index.tsx","App.tsx","index.tsx"],"names":["StyledButton","onClick","disabled","undefined","ariaLabel","props","css","Button","size","variant","rounded","rest","React","remy","px","getWidth","value","getFlex","GridContainer","styled","full","GridRow","GridColumn","xs","sm","md","lg","xl","StickyNav","div","code","gridCode","trimEnd","buttonCode","fullButtonCode","App","setTimeout","Prism","highlightAll","className","href","id","data-grid-column","data-button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c16acd0.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\n\nexport type StyledButtonProps = {\n    disabled?: boolean;\n    onClick?: () => void;\n    ariaLabel?: string;\n    size?: 'small' | 'medium' | 'large' | 'full';\n    variant?: 'solid' | 'outline' | 'link';\n    rounded?: boolean;\n    href?: string;\n    children?: React.ReactNode;\n    value?: string;\n}\n\nconst StyledButton = styled.button.attrs(({ disabled, onClick, ariaLabel }: StyledButtonProps) => ({\n    onClick: disabled ? undefined : onClick,\n    'aria-label': ariaLabel\n}))<StyledButtonProps>`\n    display: inline-block;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    text-align: center;\n    text-decoration: none;\n    vertical-align: middle;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    background-color: transparent;\n    border: 1px solid transparent;\n    font-size: 1rem;\n    transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n\n    ${props => props.size === 'full' && css`\n        width: 100%;\n        padding: .50rem 1rem;\n    `}\n    ${props => props.size === 'small' && css`\n        padding: .25rem .50rem;\n        font-size: .7rem;\n    `}\n\n    ${props => props.size === 'medium' && css`\n        padding: .25rem .80rem;\n        font-size: .8rem;\n    `}\n\n    ${props => props.size === 'large' && css`\n        padding: .50rem 1rem;\n    `}\n\n    ${props => props.variant === 'solid' && css`\n        color: #ffffff;\n        background-color: #0d6efd;\n        border-color: #0d6efd;\n        :hover {\n            color: #fff;\n            background-color: #094db1;\n            border-color: #094db1;\n        }\n    `}\n\n    ${props => props.variant === 'outline' && css`\n        color: #0d6efd;\n        border-color: #0d6efd;\n        :hover {\n            background-color: #0d6efd;\n            color: #fff;\n        }\n    `}\n\n    ${props => props.variant === 'link' && css`\n        font-weight: 400;\n        color: #0d6efd;\n        text-decoration: underline;\n    `}\n\n    ${props => props.rounded === true && css`\n        border-radius: .25rem;\n    `}\n`\n\nexport default StyledButton;","import React from 'react';\nimport StyledButton, { StyledButtonProps } from \"./styledComponents\"\n\nexport interface ButtonProps extends StyledButtonProps {}\n\nconst Button: React.FC<ButtonProps> = ({\n    size = 'medium',\n    variant = 'solid',\n    rounded = false,\n    ...rest\n}) => {\n    const props = { size, variant, rounded, ...rest };\n\n    return (\n        <StyledButton {...props}>\n            {props.children || props.value}\n        </StyledButton>\n    )\n};\n\nexport { Button, StyledButton, StyledButtonProps };","import styled, { css } from 'styled-components';\n\ninterface ContainerProps {\n    full?: boolean;\n}\n\ninterface ColumnProps {\n    xs?: number; \n    sm?: number; \n    md?: number; \n    lg?: number; \n    xl?: number; \n}\n\n// Helper function to convert pixels to rems (remy)\nconst remy = (px: number) => `${px / 16}rem`\n\n// Function for calculating value for width\nconst getWidth = (value: number) => {\n    if (!value) return\n  \n    let width = value / 12 * 100\n    return `width: ${width}%;`\n}\n\n// Function for calculating value for flex\nconst getFlex = (value: number) => {\n    if (!value) return\n  \n    let flex = value / 12 * 100\n    return `flex: 0 0 ${flex}%;`\n}\n\nconst GridContainer = styled.div<ContainerProps>`\n    padding-right: ${remy(15)};\n    padding-left: ${remy(15)};\n    margin-right: auto;\n    margin-left: auto;\n    width: 100%;\n\n    ${({full}) => !full && css`\n        // Breakpoint for tablets\n        @media (min-width: 576px) {\n        max-width: ${remy(540)};\n        }\n\n        // Breakpoint for small desktops\n        @media (min-width: 768px) {\n        max-width: ${remy(720)};\n        }\n\n        // Breakpoint for medium desktops\n        @media (min-width: 992px) {\n        max-width: ${remy(9600)};\n        }\n\n        // Breakpoint for large desktops and HD devices\n        @media (min-width: 1200px) {\n        max-width: ${remy(1140)};\n        }\n    `}\n`\n\nconst GridRow = styled.div`\n  margin-right: ${remy(-15)};\n  margin-left: ${remy(-15)};\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst GridColumn = styled.div<ColumnProps>`\n  padding-right: ${remy(15)};\n  padding-left: ${remy(15)};\n\n  // Columns for mobile\n  ${({ xs }) => (xs ? getFlex(xs) : 'flex: 0 0 100%')};\n  ${({ xs }) => (xs ? getWidth(xs) : 'width: 100%')};\n\n  // Columns for tablets\n  @media (min-width: 576px) {\n    ${({ sm }) => sm && getFlex(sm)};\n    ${({ sm }) => sm && getWidth(sm)};\n  }\n\n  // Columns for small desktops\n  @media (min-width: 768px) {\n    ${({ md }) => md && getFlex(md)};\n    ${({ md }) => md && getWidth(md)};\n  }\n\n  // Columns for medium desktops\n  @media (min-width: 992px) {\n    ${({ lg }) => lg && getFlex(lg)};\n    ${({ lg }) => lg && getWidth(lg)};\n  }\n\n  // Columns for large desktops and HD devices\n  @media (min-width: 1200px) {\n    ${({ xl }) => xl && getFlex(xl)};\n    ${({ xl }) => xl && getWidth(xl)};\n  }\n`\n\nexport { GridContainer, GridRow, GridColumn }","import React from 'react'\nimport styled from 'styled-components';\n//@ts-ignore\nimport Prism from \"prismjs\"\n\nimport { Button, GridContainer, GridRow, GridColumn } from 'fusion-ui'\n\nconst StickyNav = styled.div`\n  position: -webkit-sticky;\n  position: sticky;\n  top: 5rem;\n  display: block !important;\n  height: calc(100vh - 7rem);\n  padding-left: .25rem;\n  margin-left: -.25rem;\n  overflow-y: auto;\n`;\n\nconst code = {\n  gridCode: `\n    <GridContainer>\n      <GridRow>\n        <GridColumn xs={12} md={4}>\n          Column 1\n        </GridColumn>\n        <GridColumn xs={12} md={8}>\n          Column 2\n        </GridColumn>\n      </GridRow>\n    </GridContainer>\n  `.trimEnd(),\n  buttonCode: `\n    <Button value=\"Outline\" size=\"small\" variant=\"outline\" rounded />\n    <Button value=\"Solid\" size=\"small\" variant=\"solid\" rounded />\n    <Button value=\"Solid\" size=\"medium\" variant=\"solid\" rounded />\n  `.trimEnd(),\n  fullButtonCode: `\n    <Button data-button value=\"Solid\" size=\"full\" variant=\"solid\" rounded />\n    <Button data-button value=\"Outline\" size=\"full\" variant=\"outline\" rounded />\n  `.trimEnd()\n}\n\nconst App = () => {\n  setTimeout(() => Prism.highlightAll(), 0)\n\n  return (\n    <GridContainer full>\n      <GridRow>\n        <GridColumn xs={12} md={2}>\n          <StickyNav className=\"fui-sidebar\">\n            <ul>\n              <li><a href=\"#grid\">Grid System</a></li>\n              <li><a href=\"#buttons\">Buttons</a></li>\n            </ul>\n          </StickyNav>\n        </GridColumn>\n        <GridColumn xs={12} md={10}>\n          <main className=\"fui-main\">\n            <div className=\"fui-content\">\n              <h2 id=\"grid\">Grid System</h2>\n              <div className=\"fui-example\">\n                <GridContainer>\n                  <GridRow>\n                    <GridColumn data-grid-column xs={12} md={4}>\n                      Column 1\n                    </GridColumn>\n                    <GridColumn data-grid-column xs={12} md={8}>\n                      Column 2\n                    </GridColumn>\n                  </GridRow>\n                </GridContainer>\n              </div>\n              <div className=\"highlight\">\n                <pre className=\"line-numbers\">\n                  <code className=\"language-html\">\n                    {\n                        code.gridCode\n                    }\n                  </code>\n                </pre>\n              </div>\n            </div>\n            <div className=\"fui-content\">\n              <h2 id=\"button\">Buttons</h2>\n              <p>Fusions buttons styles are very simplistic offering outline and solid variants.</p>\n              <div className=\"fui-example\">\n                <Button data-button value=\"Outline\" size=\"small\" variant=\"link\" rounded />\n                <Button data-button value=\"Outline\" size=\"small\" variant=\"outline\" rounded />\n                <Button data-button value=\"Solid\" size=\"small\" variant=\"solid\" rounded />\n                <Button data-button value=\"Outline\" size=\"medium\" variant=\"outline\" rounded />\n                <Button data-button value=\"Solid\" size=\"medium\" variant=\"solid\" rounded />\n                <Button data-button value=\"Outline\" size=\"large\" variant=\"outline\" rounded />\n                <Button data-button value=\"Solid\" size=\"large\" variant=\"solid\" rounded />\n                <Button data-button value=\"Solid\" size=\"large\" variant=\"solid\" />\n              </div>\n              <div className=\"highlight\">\n                <pre className=\"line-numbers\">\n                  <code className=\"language-html\">\n                    {\n                      code.buttonCode\n                    }\n                  </code>\n                </pre>\n              </div>\n              <div className=\"fui-example\">\n                <Button data-button value=\"Solid\" size=\"full\" variant=\"solid\" rounded />\n                <Button data-button value=\"Outline\" size=\"full\" variant=\"outline\" rounded />\n              </div>\n              <div className=\"highlight\">\n                <pre className=\"line-numbers\">\n                  <code className=\"language-html\">\n                    {\n                      code.fullButtonCode\n                    }\n                  </code>\n                </pre>\n              </div>\n            </div>\n          </main>\n        </GridColumn>\n      </GridRow>\n    </GridContainer>\n  )\n}\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}